import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class GraphDepthFirst {
    static StringTokenizer st;
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    private int vertex;
    private LinkedList<Integer> adj[];
    GraphDepthFirst(int vertex){
        this.vertex = vertex;
        adj = new LinkedList[vertex];
        for (int i = 0; i < vertex; i++){
            adj [i] = new LinkedList();
        }
    }
    void addEdge(int baseNode, int connectedNode){
        adj[baseNode].add(connectedNode);
        adj[connectedNode].add(baseNode);
    }
    void DFS(int currentNode){
        boolean visited [] = new boolean[vertex];
        DFSUtil(currentNode, visited);
    }
    void DFSUtil(int currentNode, boolean [] visited){
        visited [currentNode] = true;
        if (currentNode == endNode){
            possible = true;
            return;
        }
        Iterator<Integer> iterator = adj[currentNode].listIterator();
        while (iterator.hasNext()) {
            int nextNode = iterator.next();
            if (!visited[nextNode]) {
                DFSUtil(nextNode, visited);
            }
        }
    }
    static boolean possible;
    static int endNode;
    public static void main(String[] args) throws IOException {
        GraphDepthFirst g = new GraphDepthFirst(readInt());
        int numberRoads = readInt();
        int startNode = readInt()-1;
        endNode = readInt()-1;
        for (int i = 0; i < numberRoads; i++){
            g.addEdge(readInt()-1, readInt()-1);
        }
        g.DFS(startNode);
        if (possible == true){
            System.out.println("GO SHAHIR!");
        }
        else{
            System.out.println("NO SHAHIR!");
        }
    }

    static String next() throws IOException {
        while (st == null || !st.hasMoreTokens())
            st = new StringTokenizer(br.readLine());
        return st.nextToken();
    }

    static int readInt() throws IOException {
        return Integer.parseInt(next());
    }

}
